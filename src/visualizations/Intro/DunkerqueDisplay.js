import { useMemo } from "react";
import { useSpring, animated } from "react-spring";
import { G } from "../../components/animatedPrimitives";
import { AnimatedCircle, AnimatedForeignObject } from "../../components/AnimatedSvgElements";
import colorsPalettes from "../../utils/colorPalettes";
import translate from "../../utils/translate";

const {dunkerqueColor} = colorsPalettes;

export default function DunkerqueDisplay({
  projection,
  width,
  height,
  lang,
  step
}) {
  const scale = useMemo(() => projection.scale(), [projection]);
  const {
    offset,
    stopColor
  } = useSpring({
    from: {
      offset: '50%',
      stopColor: 'rgba(255,255,255,0)'
    },
    to: {
      offset: '100%',
      stopColor: 'rgba(255,255,255,0)'
    },
    loop: { reverse: true }
  });
  const imageSide = scale / 1000;
  const initialSVGWidth = 920;
  const scaleSVGObjects = imageSide / initialSVGWidth;
  return (
    <>
      {
        +step < 3 ?
          <AnimatedCircle
            r={scale / 20}
            fill={'url(#dunkerque-background)'}
            cx={0}
            cy={0}
          />
          : null
      }
      {
        +step >= 3 ?
          <g className="map-container"
            transform={`scale(${width < imageSide ? width / imageSide : 1})translate(${-imageSide / 2}, ${-imageSide * .75})`}
          >
            <image
              href={`${process.env.BASE_PATH}/assets/dunkerque_map.jpg`}
              width={imageSide}
              // height={imageSide * scaleSVGObjects}
              x={0}
              y={0}
              opacity={.9}
            />
            
            <G transform={`scale(${scaleSVGObjects})`}>
              <path
                d="M790.955 305.581L751.052 284.741L759.474 256.357L769.668 227.528L724.896 216.44L726.667 190.274L707.161 185.394L695.632 183.176L694.742 182.286L684.548 159.665L657.946 162.328L649.524 131.726L626.029 124.628V111.768H624.702L606.968 116.648L601.644 117.976L596.321 119.303L589.225 112.205L570.609 113.532L555.981 158.321L543.126 159.211L529.825 113.087L513.862 119.74L508.102 106.434L468.644 124.175L438.054 90.0288L417.221 115.304L421.655 129.937L384.414 156.103L368.015 142.352L349.398 148.56L353.387 167.628L305.507 180.934L301.519 214.198L286.446 215.97L270.928 287.37L254.529 288.26L251.867 304.666L188.47 320.189L196.01 350.79L183.6 356.998L185.816 364.978L164.983 384.046L178.284 422.19L147.249 434.605L154.344 467.869L122.864 478.512L128.188 513.103L97.5974 521.528L98.0425 533.062L114.005 533.507L115.332 534.397L128.188 534.842L130.405 534.397L203.551 535.724L229.707 533.062L232.814 532.616L239.02 531.726L248.777 535.716H266.957L293.558 576.515L291.786 565.427L293.113 555.229C293.113 555.229 293.819 551.987 296.22 550.349C298.697 548.66 302.871 548.576 302.871 548.576C302.871 548.576 306.624 547.93 309.966 548.576C313.493 549.257 317.507 551.239 317.507 551.239C317.507 551.239 318.724 552.163 320.613 552.13C322.855 552.088 324.77 551.096 328.154 551.239C333.562 551.542 341.9 550.181 353.421 550.794C361.532 551.231 370.005 553.482 373.372 555.674C385.044 565.822 399.974 585.385 399.974 585.385C399.974 585.385 399.587 585.881 399.083 586.276C399.092 586.998 399.428 587.972 400.855 588.493C402.509 589.174 403.962 588.493 403.962 588.493L405.734 591.601C405.734 591.601 403.895 592.265 403.962 594.709C403.996 595.952 404.424 597.305 405.289 598.254C406.439 599.758 407.506 599.581 407.506 599.581C407.506 599.581 408.774 603.672 411.049 607.561C419.631 619.531 421.68 625.008 445.628 639.935C453.815 645.034 463.22 648.965 468.241 651.468C487.588 664.379 509.915 689.612 509.915 689.612L529.665 709.369L536.962 702.473L547.156 712.234L546.711 682.078V644.378L545.821 637.28L549.365 619.54L575.521 617.322L575.076 594.701L610.99 587.158L617.641 549.904L642.471 551.676L644.687 515.312H660.205L660.65 498.462L674.841 495.799L680.165 495.354L681.055 476.286L689.922 473.178L699.679 468.298L718.741 460.754L729.38 455.874L728.49 452.766L720.512 425.273L720.957 424.828L734.703 415.512L734.258 413.74L728.053 399.989L747.559 389.791L747.114 386.246L744.007 377.376L736.03 352.1L779.476 315.737L791.005 305.539L790.955 305.581Z"
                fill={dunkerqueColor}
                opacity={.1}
              />
              <path
                d="M790.955 305.581L751.052 284.741L759.474 256.357L769.668 227.528L724.896 216.44L726.667 190.274L707.161 185.394L695.632 183.176L694.742 182.286L684.548 159.665L657.946 162.328L649.524 131.726L626.029 124.628V111.768H624.702L606.968 116.648L601.644 117.976L596.321 119.303L589.225 112.205L570.609 113.532L555.981 158.321L543.126 159.211L529.825 113.087L513.862 119.74L508.102 106.434L468.644 124.175L438.054 90.0288L417.221 115.304L421.655 129.937L384.414 156.103L368.015 142.352L349.398 148.56L353.387 167.628L305.507 180.934L301.519 214.198L286.446 215.97L270.928 287.37L254.529 288.26L251.867 304.666L188.47 320.189L196.01 350.79L183.6 356.998L185.816 364.978L164.983 384.046L178.284 422.19L147.249 434.605L154.344 467.869L122.864 478.512L128.188 513.103L97.5974 521.528L98.0425 533.062L114.005 533.507L115.332 534.397L128.188 534.842L130.405 534.397L203.551 535.724L229.707 533.062L232.814 532.616L239.02 531.726L248.777 535.716H266.957L293.558 576.515L291.786 565.427L293.113 555.229C293.113 555.229 293.819 551.987 296.22 550.349C298.697 548.66 302.871 548.576 302.871 548.576C302.871 548.576 306.624 547.93 309.966 548.576C313.493 549.257 317.507 551.239 317.507 551.239C317.507 551.239 318.724 552.163 320.613 552.13C322.855 552.088 324.77 551.096 328.154 551.239C333.562 551.542 341.9 550.181 353.421 550.794C361.532 551.231 370.005 553.482 373.372 555.674C385.044 565.822 399.974 585.385 399.974 585.385C399.974 585.385 399.587 585.881 399.083 586.276C399.092 586.998 399.428 587.972 400.855 588.493C402.509 589.174 403.962 588.493 403.962 588.493L405.734 591.601C405.734 591.601 403.895 592.265 403.962 594.709C403.996 595.952 404.424 597.305 405.289 598.254C406.439 599.758 407.506 599.581 407.506 599.581C407.506 599.581 408.774 603.672 411.049 607.561C419.631 619.531 421.68 625.008 445.628 639.935C453.815 645.034 463.22 648.965 468.241 651.468C487.588 664.379 509.915 689.612 509.915 689.612L529.665 709.369L536.962 702.473L547.156 712.234L546.711 682.078V644.378L545.821 637.28L549.365 619.54L575.521 617.322L575.076 594.701L610.99 587.158L617.641 549.904L642.471 551.676L644.687 515.312H660.205L660.65 498.462L674.841 495.799L680.165 495.354L681.055 476.286L689.922 473.178L699.679 468.298L718.741 460.754L729.38 455.874L728.49 452.766L720.512 425.273L720.957 424.828L734.703 415.512L734.258 413.74L728.053 399.989L747.559 389.791L747.114 386.246L744.007 377.376L736.03 352.1L779.476 315.737L791.005 305.539L790.955 305.581Z"
                fill="url(#diag-hatch)"
              />
            </G>
            <pattern id={'diag-hatch'} patternUnits="userSpaceOnUse" patternTransform={`rotate(45 0 0)`} width={10} height="10">
              <line
                x1="0" y1="0" x2="0" y2="10"
                style={{
                  stroke: dunkerqueColor,
                  strokeWidth: 4
                }}
              />
            </pattern>
            <AnimatedForeignObject
              x={imageSide / 2}
              y={imageSide / 2}
              width={width}
              height={height}
            >
              <div className="map-label">
                {
                  +step === 3 ?
                  <>
                    <span>{translate('Intro', 'free_port_1', lang)}</span>
                    <br/>
                    <span>{translate('Intro', 'free_port_2', lang)}</span>
                  </>
                  :
                  <>
                    <span>{translate('Intro', 'sources_1_1', lang)}</span>
                    <br/>
                    <span>{translate('Intro', 'sources_1_2', lang)}</span>
                  </>
                }
              </div>
            </AnimatedForeignObject>
            <AnimatedForeignObject
              x={imageSide * .1}
              y={imageSide * .8}
              width={width}
              height={height}
            >
              <div className="map-label">
                {
                  +step === 3 ?
                  <>
                    <span>{translate('Intro', 'france_1', lang)}</span>
                    <br/>
                    <span>{translate('Intro', 'france_2', lang)}</span>
                  </>
                  :
                  <>
                    <span>{translate('Intro', 'sources_2_1', lang)}</span>
                    <br/>
                    <span>{translate('Intro', 'sources_2_2', lang)}</span>
                  </>
                }
               
              </div>
            </AnimatedForeignObject>
          </g>
          : null
      }

      <radialGradient id={`dunkerque-background`}>
        {/* <animated.stop offset={'0%'} stopColor={colorsPalettes.ui.colorAccentBackground} />
          <animated.stop offset={'5%'} stopColor={colorsPalettes.ui.colorAccentBackground} />
 */}
        <animated.stop offset={'0%'} stopColor={dunkerqueColor} />
        <animated.stop offset={'5%'} stopColor={dunkerqueColor} />


        <animated.stop offset={'5%'} stopColor={'rgb(255, 255, 255)'} />
        <animated.stop offset={offset} stopColor={stopColor} />
      </radialGradient>
    </>
  )
}